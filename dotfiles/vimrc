set encoding=utf-8
set nocompatible    "run in vim mode
" Will install plugins if not detected
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin("~/.vim/plugged")
  " Colorscheme
  Plug 'arcticicestudio/nord-vim'
  Plug 'flazz/vim-colorschemes'
  Plug 'rakr/vim-one'
  Plug 'drewtempelmeyer/palenight.vim'
  Plug 'doums/darcula'

  "Javascript / React
  Plug 'pangloss/vim-javascript'
  Plug 'elzr/vim-json'
  Plug 'maxmellon/vim-jsx-pretty'


  "Tpope plugins
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-ragtag'

  "ruby / rails
  Plug 'vim-ruby/vim-ruby'
  Plug 'ngmy/vim-rubocop'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-bundler'

  "html / css
  Plug 'mattn/emmet-vim'
  Plug 'ap/vim-css-color'
  Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

  "Mark down previewing
  "Ensure you have nodejs and yarn
  Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }

  "file exploration
  Plug 'scrooloose/nerdtree'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

  " Linting
  Plug 'w0rp/ale'

  " Snippets
  Plug 'Shougo/neosnippet.vim'
  Plug 'Shougo/neosnippet-snippets' " prebuilt snippets

  " Autocompletion w/ sources
  Plug 'Shougo/neco-vim'
  Plug 'Shougo/neoinclude.vim'
  Plug 'Shougo/neopairs.vim'
  Plug 'Shougo/context_filetype.vim'
  Plug 'Konfekt/FastFold'
  Plug 'deoplete-plugins/deoplete-tag'
  if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
  endif
call plug#end()

let mapleader = " " "space is now \

" Autosave
set autowrite

"indentations
set smartindent
set autoindent
set preserveindent
set copyindent

"tabs
set expandtab       "expand tabs into spaces
set tabstop=2 " when indenting with '>', use 4 spaces width
set shiftwidth=2 " On pressing tab, insert 4 spaces
set shiftround

"Make it obvious where 80 characters is
set colorcolumn=81

"Numbers
set number
set numberwidth=5

"Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

set showmatch       "show matching brackets
set ruler           "show cursor position at all times
set nohls           "don't highlight the previous search term
set number          "turn on line numbering
set wrap            "turn on visual word wrapping
set linebreak       "only break lines on 'breakat' characters
set foldmethod=indent
set nofoldenable
syntax on           "turn on syntax highlighting
set nobackup        "no backups
set nowritebackup   "no backup file while editing
set noswapfile      "no creation of swap files
filetype plugin indent on
set backspace=indent,eol,start "fixes backspace in vim
set wildmenu
set showcmd
set history=50
set incsearch "incremental searching
set hidden
set lazyredraw "Fixes files at the end of macros
set cursorline "Adds a highlight to current line
set guifont=DejavuSansMono\ Nerd\ Font\ 14
set clipboard=unnamedplus "stupid clipboard crap
set linespace=3
set cursorcolumn "Makes working with yaml files easier
set wildignore+=node_modules
set gdefault "Allows multiple substitutions per line

"Fixing splits to be more natural
set splitbelow
set splitright

" Always use vertical diffs
set diffopt+=vertical

" 'matchit.vim' is built-in so let's enable it!
" " Hit '%' on 'if' to jump to 'else'.
runtime macros/matchit.vim

" Tags searching
set tags=./tags

if has('nvim') || has('termguicolors')
  set termguicolors
  set t_Co=256
endif

" Return cursor to original position
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal g'\"" | endif
endif

augroup filetypedetect
  au! BufRead,BufNewFile *nc setfiletype nc "http://www.vim.org/scripts/script.php?script_id=1847
  "html.ep now handled by https://github.com/yko/mojo.vim
  autocmd BufNewFile,BufReadPost *.ino,*.pde set filetype=cpp
augroup END


"strip trailing whitespace from all files
autocmd BufWritePre * :%s/\s\+$//e

set bs=2 "fix backspace on some consoles

" set spacing on files
autocmd FileType * setlocal expandtab shiftwidth=2 tabstop=2

"removes auto-commenting when hitting <CR>
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

set background=dark
let g:quantum_black = 1
let g:nord_uniform_status_lines = 1
colorscheme palenight

" set background=light
" colorscheme PaperColor

" use default
set laststatus=2
set statusline=
set statusline+=\ %<%F\ %m\ %r\ %h\ %=%=%=%y\ [%c]%=

" Fix status line in one colorscheme
" call one#highlight('StatusLine', '', '', 'reverse')
" Black background for my crappy glossy laptop
" highlight Normal guibg=black ctermbg=black
highlight StatusLine guibg=#87875f guifg=#262626

" Using splits
map <Leader>s :split<CR>

" Go to last buffer
nnoremap <Leader><Leader> <C-^>

" better window movement
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" editing vim
map <Leader>ev :split $HOME/.vimrc<CR>
map <Leader>rv :source $MYVIMRC<CR>

" saving made eaiser
map <Leader>ww :w!<CR>
map <Leader>wq :wq!<CR>

" quit
map <Leader>qq :q!<CR>

"fzf config
map <Leader>f :FZF <Esc>
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
      \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler



" The Silver Searcher for grep vs regular grep
if executable('ag')
  " uses silver searcher for faster searches
  let $FZF_DEFAULT_COMMAND = 'ag -g ""'
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

" Search with silversearch
":Ag to grep shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

" Bind \ to :Ag
nnoremap \ :Ag<SPACE>
" bind <Leader>gc to grep word under cursor
nnoremap <Leader>gc :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" Grep previous grep
nnoremap <Leader>gp :grep /<C-r>// %<CR>

" Global Search and Replace
nnoremap <Leader>gd :args .
nnoremap <Leader>gp :argdo %s/foo/bar/g

" Navigation
nnoremap <Leader>cn :cnext<CR>
nnoremap <Leader>cp :cprevious<CR>
nnoremap <Leader>cf :cfirst<CR>
nnoremap <Leader>cl :clast<CR>


" rubocop mapping
nmap <Leader>rr :RuboCop<CR>
nmap <Leader>ra :RuboCop -a<CR>

" ragtag recommended keybinding
inoremap <M-o> <Esc>o
inoremap <C-j> <Down>
let g:ragtag_global_maps = 1 "available globally

" Rebinds ctrl-x ctrl-k to not interfere with snippet jumping
inoremap <c-x><c-k> <c-k><c-x>

" tag completion
inoremap <c-x><c-]> <c-]>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Plug commands
map <Leader>pi :PlugInstall<CR>
map <Leader>pu :PlugUpdate<CR>
map <Leader>pru :UpdateRemotePlugins<CR>
map <Leader>pc :PlugClean<CR>


function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

map <Leader>rn :call RenameFile()<cr>

function! Touch()
  let current_dir = expand('%:h')
  let file_name = input('New file name: ', current_dir . '/')

  exec ':e ' . file_name
endfunction

map <Leader>nf :call Touch()<CR>

map <Leader>bl :set background=light<CR>
map <Leader>bd :set background=dark<CR>

" Jump down sensibly
nnoremap j gj
nnoremap k gk

" Toggle file explorer
map <C-n> :NERDTreeToggle<CR>

nmap <Leader>ad :ALEDetail<CR>
let g:ale_lint_delay = 500

" Dont let it override <C-y>
let g:user_emmet_leader_key = '<C-e>'

" Deoplete settings
let g:deoplete#enable_at_startup = 1

" Expands snippets with <C-e>
imap <expr><C-k>
      \ (pumvisible() && neosnippet#expandable()) ?
      \ "\<Plug>(neosnippet_expand)" : "\<CR>"

" Expand snippets in dropdown with <C-e>
xmap <expr><C-k>
      \ (pumvisible() && neosnippet#expandable()) ?
      \ "\<Plug>(neosnippet_expand_target)" : "\<CR>"

" Neosnippets
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.my-snippets'

map <Leader>ns :NeoSnippetEdit<CR>

" Clear markers when not in insert mode
autocmd InsertLeave * NeoSnippetClearMarkers

"For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" highlight Pmenu ctermbg=8 guibg=#606060
" highlight PmenuSel ctermbg=1 guifg=#dddd00 guibg=#1f82cd
" highlight PmenuSbar ctermbg=0 guibg=#d6d6d6

" Markdown preview mapping
nmap <Leader>md <Plug>MarkdownPreview
nmap <Leader>ms <Plug>MarkdownPreviewStop
nmap <Leader>mt <Plug>MarkdownPreviewToggle<Paste>

let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync
