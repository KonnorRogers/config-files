set encoding=utf-8
set nocompatible
" Will install plugins if not detected
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin("~/.vim/plugged")
  " Colorscheme
  Plug 'flazz/vim-colorschemes'
  Plug 'drewtempelmeyer/palenight.vim'

  "Tpope plugins
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-ragtag'

  "Javascript / React
  Plug 'pangloss/vim-javascript'
  Plug 'elzr/vim-json'
  Plug 'maxmellon/vim-jsx-pretty'

  "ruby / rails
  Plug 'vim-ruby/vim-ruby'
  Plug 'ngmy/vim-rubocop'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-bundler'

  "html / css
  Plug 'mattn/emmet-vim'
  Plug 'ap/vim-css-color'
  Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

  "Markdown previewing, Ensure you have nodejs and yarn
  Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }

  " Snippets
  Plug 'SirVer/ultisnips'

  "Fuzzy findings
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

  " Linting
  Plug 'dense-analysis/ale'
call plug#end()

" Path variables, prepend current directory
set path^=.,,

" Autosave
set autowrite

"indentations
set smartindent
set autoindent
set preserveindent
set copyindent

"tabs
set expandtab       "expand tabs into spaces
set tabstop=2 " when indenting with '>', use 4 spaces width
set shiftwidth=2 " On pressing tab, insert 4 spaces
set shiftround

"Make it obvious where 80 characters is
set colorcolumn=81

"Left hand column numbers
set number
set relativenumber

"Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

"show matching brackets
set showmatch

"show cursor position at all times
set ruler

"don't highlight the previous search term
set nohls

"incremental searching
set incsearch

"turn on visual word wrapping
set wrap

"only break lines on 'breakat' characters
set linebreak

" Folds
set foldmethod=indent
set nofoldenable

"Syntax highlighting
syntax on

"Enable filetypes, indentation and plugins
filetype plugin indent on

"Say no to file backups
set nobackup
set nowritebackup
set noswapfile

"fixes backspace in vim
set backspace=indent,eol,start

"fix backspace on some consoles
set bs=2

"Tabbing menu
set wildmenu
set wildmode=full
set wildignorecase
set wildignore+=*/node_modules/*


"show command line
set showcmd

"keep small history
set history=50

"Keep buffers alive in background
set hidden

"Fixes files at the end of macros, better performance
set lazyredraw

"Stupid clipboard crap, configure this accordingly
set clipboard+=unnamedplus

"Provide a line of what column youre in
set cursorcolumn

"Adds a horizontal highlight to current line
set cursorline

" Global substitutions by default
set gdefault

"Fixing splits to be more natural
set splitbelow
set splitright

" Always use vertical diffs
set diffopt+=vertical

" 'matchit.vim' is built-in so let's enable it!
" " Hit '%' on 'if' to jump to 'else'.
runtime macros/matchit.vim

" Tags searching
set tags+=./.git/tags
set tags+=./tags

"Colorscheme / appearance
set background=dark
colorscheme apprentice

"Status line
set laststatus=2
set statusline=
set statusline+=\ %<%F\ %m\ %r\ %h\ %=%=%=%y\ [%c]%=

highlight StatusLine guibg=#87875f guifg=#262626
highlight link NERDTreeDir Constant

" Autocommands

" Return cursor to original position
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal g'\"" | endif
endif

augroup filetypedetect
  au! BufRead,BufNewFile *nc setfiletype nc "http://www.vim.org/scripts/script.php?script_id=1847
  "html.ep now handled by https://github.com/yko/mojo.vim
  autocmd BufNewFile,BufReadPost *.ino,*.pde setfiletype cpp

  " Set markdown files to markdown filetype
  autocmd BufNewFile,BufRead *.md,*markdown set filetype=markdown
augroup END


"strip trailing whitespace from all files
autocmd BufWritePre * :%s/\s\+$//e

"removes auto-commenting when hitting <CR>
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Dont set autochdir, instead create an instance of current dir
augroup filecompletion
  " Change to directory of currently open file
  autocmd InsertEnter * lcd %:p:h

  " Change back to root directory
  autocmd InsertLeave * cd -
augroup END

" Mappings

"<Leader> is now <space>
let mapleader = " "

" Jump down sensibly
nnoremap j gj
nnoremap k gk

" Using splits
map <Leader>s :split<CR>

"Buffer switching
nnoremap <Leader><Leader> <C-^>
nnoremap <Leader>bp :bprev<CR>
nnoremap <Leader>bn :bnext<CR>

"Tab switching
nnoremap <Leader>tn :tabnew<CR>
nnoremap <Leader>tj :tabnext<CR>
nnoremap <Leader>tp :tabprev<CR>
nnoremap <Leader>tc :tabclose<CR>

" better window movement
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" editing vim
map <Leader>rc :edit $HOME/.vimrc<CR>
map <Leader>rv :source $MYVIMRC<CR>

" saving made eaiser
map <Leader>ww :w!<CR>
map <Leader>wq :wq!<CR>

" quit
map <Leader>qq :q!<CR>

" Quickfix Navigation
nnoremap ]q :cnext<CR>zz
nnoremap [q :cprevious<CR>zz
nnoremap [Q :cfirst<CR>zz
nnoremap ]Q :clast<CR>zz

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

if executable('ag')
  set grepprg=ag\ --vimgrep
  set grepformat=%f:%l:%c%m
  "Respect .gitignore
  command! -bang -nargs=* GitFiles call fzf#run(fzf#wrap({'source': 'ag --hidden -g ""', 'sink': 'e'}, <bang>0))
  nnoremap <Leader>f :GitFiles!<CR>

   "Do not respect .gitignore
  command! -bang -nargs=* Files call fzf#run(fzf#wrap({'source': 'ag -u -g ""', 'sink': 'e'}, <bang>0))
  nnoremap <Leader>F :Files!<CR>


   "populate quickfix with \
  "populate quickfix with \
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<space>
else
  " Default fzf if ag not installed
  nnoremap <Leader>F :FZF!

   " Use git ls-files to respect .gitignore
  command! -bang -nargs=* GitLsFiles call fzf#run(fzf#wrap({'source': 'git ls-files', 'sink': 'e'}, <bang>0))
  nnoremap <Leader>f :GitLsFiles!
endif

 "Remove statusline when using fzf
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
      \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

 autocmd! User FzfStatusLine call <SID>fzf_statusline()

" bind <Leader>gw to grep word under cursor
nnoremap <Leader>gw :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Custom functions
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

map <Leader>rn :call RenameFile()<cr>

" Plug commands
map <Leader>pa :PlugInstall <bar> :PlugUpdate
map <Leader>pi :PlugInstall<CR>
map <Leader>pu :PlugUpdate<CR>
map <Leader>pru :UpdateRemotePlugins<CR>
map <Leader>pc :PlugClean<CR>

" rubocop mapping
nmap <Leader>rr :RuboCop<CR>
nmap <Leader>ra :RuboCop -a<CR>

" ragtag recommended keybinding
inoremap <M-o> <Esc>o
inoremap <C-j> <Down>

"available globally
let g:ragtag_global_maps = 1

"Netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_winsize = 25
nnoremap <C-n> :Lexplore<CR>

"ALE config
nmap <Leader>ad :ALEDetail<CR>
let g:ale_lint_delay = 500

" Dont let it override <C-y>
let g:user_emmet_leader_key = '<C-e>'

" Ultisnips
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<c-j>"
let g:UltiSnipsListSnippets="<c-l>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Edit snippets
nnoremap <Leader>us :UltiSnipsEdit<CR>

" Set my snippets
let g:UltiSnipsSnippetDirectories = [$HOME.'/.my-snippets']

" Remove backward jump interference
inoremap <c-x><c-k> <c-x><c-k>

" Markdown preview mapping
nmap <Leader>md <Plug>MarkdownPreview
nmap <Leader>ms <Plug>MarkdownPreviewStop
nmap <Leader>mt <Plug>MarkdownPreviewToggle<Paste>

let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync

" Run ctags
function! GitCtags()
  let s:git_root = systemlist('git rev-parse --show-toplevel')[0]
  let s:tag_dir = '/.git/tags'

  execute "!ctags -R --tag-relative -f " . s:git_root . s:tag_dir
endfunction

nnoremap <Leader>ct :call GitCtags()<CR>

" Completion
setlocal omnifunc=syntaxcomplete#Complete
setlocal completefunc=syntaxcomplete#Complete

" File completion
inoremap <C-f> <C-x><C-f>

" Omni completion
inoremap <C-o> <C-x><C-o>

" Tag completion
inoremap <C-t> <C-x><C-]>

set cmdheight=1

" Find what to highlight
map <Leader>syn :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>


