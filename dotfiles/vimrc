set encoding=utf-8
" Will install plugin manager if not detected
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin("~/.vim/plugged")
  "Colorscheme
  Plug 'zeis/vim-kolor'
  Plug 'paramagicdev/vim-medic-chalk'

  "Tpope plugins
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-ragtag'

  "Javascript / React
  Plug 'yuezk/vim-js'
  Plug 'elzr/vim-json'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'jxnblk/vim-mdx-js'

  " Typescript
  Plug 'leafgarland/typescript-vim'
  Plug 'peitalin/vim-jsx-typescript'

  "ruby / rails
  Plug 'vim-ruby/vim-ruby'
  Plug 'ngmy/vim-rubocop'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-bundler'

  "html / css
  Plug 'mattn/emmet-vim'
  Plug 'ap/vim-css-color'

  " Snippets
  Plug 'SirVer/ultisnips'

  " Linting
  Plug 'dense-analysis/ale'

  "Misc
  Plug 'junegunn/rainbow_parentheses.vim'
  let g:rainbow#max_level = 16
  let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}'], ['<', '>']]

  "File Explorer
  Plug 'preservim/nerdtree'
call plug#end()

" Path variables, prepend current directory
set path^=.,,

" Autosave
set autowrite

"indentations
set smartindent
set autoindent
set preserveindent
set copyindent

"tabs
set expandtab       "expand tabs into spaces
set tabstop=2 " when indenting with '>', use 4 spaces width
set shiftwidth=2 " On pressing tab, insert 4 spaces
set shiftround

"Make it obvious where 80 characters is
set colorcolumn=81

"Left hand column numbers
set number
set relativenumber

"Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

"show matching brackets
set showmatch

"show cursor position at all times
set ruler

"don't highlight the previous search term
set nohls

"incremental searching
set incsearch

" incremental commands
if exists('+inccommand')
  set inccommand=nosplit
endif

"turn on visual word wrapping
set wrap

"only break lines on 'breakat' characters
set linebreak

" Folds
set foldmethod=syntax

"Syntax highlighting
syntax on

"Enable filetypes, indentation and plugins
filetype plugin indent on

"Say no to file backups
set nobackup
set nowritebackup
set noswapfile
" set backupcopy=yes

"fixes backspace in vim
set backspace=indent,eol,start

"fix backspace on some consoles
set bs=2

"Tabbing menu
set wildmenu
set wildmode=full
set wildignorecase

set wildignore+=*/node_modules/*
set wildignore+=*/coverage/*
set wildignore+=*/public/*
set wildignore+=*/.git/*,*/tmp/*,*/.tmp/*
set wildignore+=*/.bundle/*,*/vendor/*,*/log/*

"show command line
set showcmd

"keep small history
set history=50

"Keep buffers alive in background
set hidden

"Fixes files at the end of macros, better performance
set lazyredraw

"Stupid clipboard crap, configure this accordingly
set clipboard+=unnamedplus

"Provide a line of what column youre in
set cursorcolumn

"Adds a horizontal highlight to current line
set cursorline

" Global substitutions by default
set gdefault

"Fixing splits to be more natural
set splitbelow
set splitright

" Always use vertical diffs
set diffopt+=vertical

" 'matchit.vim' is built-in so let's enable it!
" " Hit '%' on 'if' to jump to 'else'.
runtime macros/matchit.vim

" Tags searching
set tags+=./.git/tags
set tags+=./tags


function! KolorHighlights() abort
  highlight Normal ctermbg=0
  highlight Folded ctermbg=08 ctermfg=12
  highlight FoldColumn ctermbg=0
  " highlight WhiteSpace ctermbg=0

  " Gutter
  highlight CursorLineNR ctermbg=0
  highlight LineNR ctermbg=08
  highlight SignColumn ctermbg=0
  highlight CursorLine ctermbg=08

  " Columns
  highlight VertSplit ctermbg=08
  highlight ColorColumn ctermbg=08
  highlight CursorColumn ctermbg=08

  "Blank buffer
  highlight EndOfBuffer ctermbg=0

  " Parens
  highlight MatchParen ctermbg=8 ctermfg=13 cterm=NONE guibg=#1c1c1c guifg=#FF5FD7 gui=NONE
  highlight StatusLine guibg=#87875f guifg=#262626 ctermbg=101 ctermfg=0 cterm=NONE gui=NONE
  highlight StatusLineNC guibg=#87875f guifg=#262626 ctermbg=101 ctermfg=0 cterm=inverse gui=inverse
endfunction

function! MedicChalkHighlights() abort
  highlight Folded ctermbg=0 ctermfg=5 guibg=#000000 guifg=#CD00CD
endfunction

" For Kolor colorscheme
augroup MyColors
  autocmd!
  autocmd ColorScheme kolor call KolorHighlights()
  autocmd ColorScheme medic_chalk call MedicChalkHighlights()
augroup END 


"Colorscheme / appearance
set background=dark
colorscheme kolor

"Status line
set laststatus=2
set statusline=
set statusline+=\ %<%F\ %m\ %r\ %h\ %=%=%=%y\ [%c]%=


" Autocommands

" Return cursor to original position
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal g'\"" | endif
endif

augroup filetypedetect
  au! BufRead,BufNewFile *nc setfiletype nc "http://www.vim.org/scripts/script.php?script_id=1847
  "html.ep now handled by https://github.com/yko/mojo.vim
  autocmd BufNewFile,BufReadPost *.ino,*.pde setfiletype cpp

  " Set markdown files to markdown filetype
  autocmd BufNewFile,BufRead *.md,*.markdown setfiletype=markdown
  autocmd BufNewFile,BufRead *.mdx,*.md,*.markdown setlocal foldmethod=indent
  autocmd BufNewFile,BufRead Dockerfile* set filetype=dockerfile
augroup END

augroup rainbow_parentheses
  autocmd!
  autocmd FileType * RainbowParentheses
augroup END



"removes auto-commenting when hitting <CR>
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Mappings

"<Leader> is now <space>
let mapleader = " "

" Jump down sensibly
nnoremap j gj
nnoremap k gk

set helpheight=20

" Using splits
map <Leader>sp :split<space>
nnoremap <Leader>vs :vsplit<space>

"Buffer switching
nnoremap <Leader><Leader> <C-^>
nnoremap [b :bprev<CR>
nnoremap ]b :bnext<CR>
nnoremap ]B :bclose<CR>

"Tab switching
nnoremap <Leader>tn :tabnew<CR>
nnoremap <Leader>tj :tabnext<CR>
nnoremap <Leader>tk :tabprev<CR>
nnoremap <Leader>tc :tabclose<CR>

" better window movement
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" editing vim
map <Leader>rc :edit $HOME/.vimrc<CR>
map <Leader>rv :source $MYVIMRC<CR>

" saving made eaiser
map <Leader>ww :w!<CR>
map <Leader>wq :wq!<CR>

" quit
map <Leader>qq :q!<CR>

" Quickfix Navigation
nnoremap ]q :cnext<CR>zz
nnoremap [q :cprevious<CR>zz
nnoremap [Q :cfirst<CR>zz
nnoremap ]Q :clast<CR>zz

" Insert filename
inoremap %f <C-R>=expand('%:t')<CR>

" Insert file basename
inoremap %b <C-R>=expand('%:t:r')<CR>

" Insert directory
inoremap %d <C-R>=expand('%')<CR>

" Insert full path
inoremap %p <C-R>=expand('%')<CR>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

"File nav
if executable('ag')
  set grepprg=ag\ --vimgrep
  set grepformat=%f:%l:%c%m

  "populate quickfix with \
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<space>
endif

" bind <Leader>gw to grep word under cursor
nnoremap <Leader>gw :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>


" Custom functions
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    exec ':e ' . new_name
    exec ':bwipeout ' . old_name
    redraw!
  endif
endfunction

map <Leader>rn :call RenameFile()<cr>

map <Leader>to :edit <C-R>=expand('%:p:h') . '/'<CR>

" Plug commands
map <Leader>pa :PlugInstall <bar> :PlugUpdate
map <Leader>pi :PlugInstall<CR>
map <Leader>pu :PlugUpdate<CR>
map <Leader>pru :UpdateRemotePlugins<CR>
map <Leader>pc :PlugClean<CR>

" rubocop mapping
nmap <Leader>rr :RuboCop<CR>
nmap <Leader>ra :RuboCop -a<CR>

" ragtag recommended keybinding
inoremap <M-o> <Esc>o
inoremap <C-j> <Down>

"available globally
let g:ragtag_global_maps = 1

"NerdTree
let g:NERDTreeMinimalUI = 1
let g:NERDTreeDirArrows = 1
nnoremap <C-n> :NERDTreeToggle<CR>

"ALE config
nmap <Leader>ad :ALEDetail<CR>
let g:ale_fixers = {'javascript': ['eslint']}
let g:ale_linters = {'javascript': ['eslint']}
let g:ale_fix_on_save = 1
let g:ale_lint_delay = 500

let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'

" Dont let it override <C-y>
let g:user_emmet_leader_key = '<C-e>'

" Ultisnips
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<c-j>"
let g:UltiSnipsListSnippets="<c-l>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Edit snippets
nnoremap <Leader>us :UltiSnipsEdit<CR>
nnoremap <Leader>ud :edit $HOME/.my-snippets

" Set my snippets
let g:UltiSnipsSnippetDirectories = [$HOME.'/.my-snippets']

" Remove backward jump interference
inoremap <c-x><c-k> <c-x><c-k>

" Markdown preview mapping
nmap <Leader>md <Plug>MarkdownPreview
nmap <Leader>ms <Plug>MarkdownPreviewStop
nmap <Leader>mt <Plug>MarkdownPreviewToggle<Paste>

" Run ctags
function! GitCtags()
  let s:git_root = systemlist('git rev-parse --show-toplevel')[0]
  let s:tag_dir = '/.git/tags'

  execute "!ctags -R --tag-relative -f " . s:git_root . s:tag_dir
endfunction

nnoremap <Leader>gt :call GitCtags()<CR>

" Completion
setlocal omnifunc=syntaxcomplete#Complete
setlocal completefunc=syntaxcomplete#Complete

" Find what to highlight
map <F12> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Vim based file navigation
nnoremap <Leader>f :find ./**/*
nnoremap <Leader>F :find<space>
nnoremap <Leader>e :edit ./
nnoremap <Leader>E :edit<space>
