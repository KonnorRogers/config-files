set encoding=utf-8
set nocompatible
" Will install plugins if not detected
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin("~/.vim/plugged")
  " Colorscheme
  Plug 'flazz/vim-colorschemes'
  Plug 'drewtempelmeyer/palenight.vim'

  "Tpope plugins
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-ragtag'

  "Javascript / React
  Plug 'pangloss/vim-javascript'
  Plug 'elzr/vim-json'
  Plug 'maxmellon/vim-jsx-pretty'

  "ruby / rails
  Plug 'vim-ruby/vim-ruby'
  Plug 'ngmy/vim-rubocop'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-bundler'

  "html / css
  Plug 'mattn/emmet-vim'
  Plug 'ap/vim-css-color'
  Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

  "Markdown previewing, Ensure you have nodejs and yarn
  Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }

  "file exploration
  Plug 'scrooloose/nerdtree'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

  " Snippets
  Plug 'SirVer/ultisnips'

  " Linting
  Plug 'dense-analysis/ale'

  " Autocompletion
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

" Path variables
set path+=.,,**

" Autosave
set autowrite

"indentations
set smartindent
set autoindent
set preserveindent
set copyindent

"tabs
set expandtab       "expand tabs into spaces
set tabstop=2 " when indenting with '>', use 4 spaces width
set shiftwidth=2 " On pressing tab, insert 4 spaces
set shiftround

"Make it obvious where 80 characters is
set colorcolumn=81

"Left hand column numbers
set number
set relativenumber

"Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

"show matching brackets
set showmatch

"show cursor position at all times
set ruler

"don't highlight the previous search term
set nohls

"incremental searching
set incsearch

"turn on visual word wrapping
set wrap

"only break lines on 'breakat' characters
set linebreak

" Folds
set foldmethod=indent
set nofoldenable

"Syntax highlighting
syntax on

"Enable filetypes, indentation and plugins
filetype plugin indent on

"Say no to file backups
set nobackup
set nowritebackup
set noswapfile

"fixes backspace in vim
set backspace=indent,eol,start

"fix backspace on some consoles
set bs=2

"Tabbing menu
set wildmenu
set wildignore+=node_modules

"show command line
set showcmd

"keep small history
set history=50

"Keep buffers alive in background
set hidden

"Fixes files at the end of macros, better performance
set lazyredraw

"Stupid clipboard crap, configure this accordingly
set clipboard+=unnamedplus

"Provide a line of what column youre in
set cursorcolumn

"Adds a horizontal highlight to current line
set cursorline

" Global substitutions by default
set gdefault

"Fixing splits to be more natural
set splitbelow
set splitright

" Always use vertical diffs
set diffopt+=vertical

" 'matchit.vim' is built-in so let's enable it!
" " Hit '%' on 'if' to jump to 'else'.
runtime macros/matchit.vim

" Tags searching
set tags+=./.git/tags
set tags+=./tags

"Colorscheme / appearance
set background=dark
colorscheme apprentice

"Status line
set laststatus=2
set statusline=
set statusline+=\ %<%F\ %m\ %r\ %h\ %=%=%=%y\ [%c]%=

highlight StatusLine guibg=#87875f guifg=#262626
highlight link NERDTreeDir Constant

" Autocommands

" Return cursor to original position
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal g'\"" | endif
endif

augroup filetypedetect
  au! BufRead,BufNewFile *nc setfiletype nc "http://www.vim.org/scripts/script.php?script_id=1847
  "html.ep now handled by https://github.com/yko/mojo.vim
  autocmd BufNewFile,BufReadPost *.ino,*.pde setfiletype cpp

  " Set markdown files to markdown filetype
  autocmd BufNewFile,BufRead *.md,*markdown set filetype=markdown
augroup END


"strip trailing whitespace from all files
autocmd BufWritePre * :%s/\s\+$//e

"removes auto-commenting when hitting <CR>
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Mappings

"<Leader> is now <space>
let mapleader = " "

" Jump down sensibly
nnoremap j gj
nnoremap k gk

" Using splits
map <Leader>s :split<CR>

"Buffer switching
nnoremap <Leader><Leader> <C-^>
nnoremap <Leader>bp :bprev<CR>
nnoremap <Leader>bn :bnext<CR>

"Tab switching
nnoremap <Leader>tn :tabnew<CR>
nnoremap <Leader>tj :tabnext<CR>
nnoremap <Leader>tp :tabprev<CR>
nnoremap <Leader>tc :tabclose<CR>

" better window movement
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" editing vim
map <Leader>ev :split $HOME/.vimrc<CR>
map <Leader>rv :source $MYVIMRC<CR>

" saving made eaiser
map <Leader>ww :w!<CR>
map <Leader>wq :wq!<CR>

" quit
map <Leader>qq :q!<CR>

" Quickfix Navigation
nnoremap ]q :cnext<CR>zz
nnoremap [q :cprevious<CR>zz
nnoremap [Q :cfirst<CR>zz
nnoremap ]Q :clast<CR>zz

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Custom functions

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

map <Leader>rn :call RenameFile()<cr>

function! Touch()
  let current_dir = expand('%:h')
  let file_name = input('New file name: ', current_dir . '/')

  exec ':e ' . file_name
endfunction

map <Leader>nf :call Touch()<CR>

" Plug commands
map <Leader>pi :PlugInstall<CR>
map <Leader>pu :PlugUpdate<CR>
map <Leader>pru :UpdateRemotePlugins<CR>
map <Leader>pc :PlugClean<CR>

" rubocop mapping
nmap <Leader>rr :RuboCop<CR>
nmap <Leader>ra :RuboCop -a<CR>

" ragtag recommended keybinding
inoremap <M-o> <Esc>o
inoremap <C-j> <Down>

"available globally
let g:ragtag_global_maps = 1

"fzf config

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --column
  set grepformat=%f:%l:%c%m
  "Respect .gitignore
  command! -bang -nargs=* GitFiles call fzf#run(fzf#wrap({'source': 'ag --hidden -g ""', 'sink': 'e'}))
  nnoremap <Leader>f :GitFiles<CR>

  "Do not respect .gitignore
  command! -bang -nargs=* Files call fzf#run(fzf#wrap({'source': 'ag -u -g ""', 'sink': 'e'}))
  nnoremap <Leader>F :Files<CR>


  "populate quickfix with \
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<space>
else
  " Default fzf if ag not installed
  nnoremap <Leader>F :FZF

  " Use git ls-files to respect .gitignore
  command! -bang -nargs=* GitLsFiles call fzf#run(fzf#wrap({'source': 'git ls-files', 'sink': 'e'}))
  nnoremap <Leader>f :GitLsFiles
endif

" bind <Leader>gw to grep word under cursor
nnoremap <Leader>gw :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Customize fzf colors to match your color scheme
" let g:fzf_colors =
" \ { 'fg':      ['fg', 'Normal'],
"   \ 'bg':      ['bg', 'Normal'],
"   \ 'hl':      ['fg', 'Comment'],
"   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"   \ 'hl+':     ['fg', 'Statement'],
"   \ 'info':    ['fg', 'PreProc'],
"   \ 'border':  ['fg', 'Ignore'],
"   \ 'prompt':  ['fg', 'Conditional'],
"   \ 'pointer': ['fg', 'Exception'],
"   \ 'marker':  ['fg', 'Keyword'],
"   \ 'spinner': ['fg', 'Label'],
"   \ 'header':  ['fg', 'Comment'] }


"Remove statusline when using fzf
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
      \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

autocmd! User FzfStatusLine call <SID>fzf_statusline()

"Nerdtree
let g:NERDTreeShowHidden=1
nnoremap <C-n> :NERDTreeToggle<CR>

"ALE config
nmap <Leader>ad :ALEDetail<CR>
let g:ale_lint_delay = 500

" Dont let it override <C-y>
let g:user_emmet_leader_key = '<C-e>'

" Ultisnips
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<c-j>"
let g:UltiSnipsListSnippets="<c-l>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Edit snippets
nnoremap <Leader>us :UltiSnipsEdit<CR>

" Set my snippets
let g:UltiSnipsSnippetDirectories = [$HOME.'/.my-snippets']

" Remove backward jump interference
inoremap <c-x><c-k> <c-x><c-k>

" Markdown preview mapping
nmap <Leader>md <Plug>MarkdownPreview
nmap <Leader>ms <Plug>MarkdownPreviewStop
nmap <Leader>mt <Plug>MarkdownPreviewToggle<Paste>

let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync

" Ctags command
command! -nargs=+ Ctags !ctags <args>

" Run ctags
nnoremap <Leader>ct :Ctags -R -f ./.git/tags .<CR>

" Completion
setlocal omnifunc=syntaxcomplete#Complete
setlocal completefunc=syntaxcomplete#Complete

" CoC recommended config
let g:coc_start_at_startup = 1
let g:coc_global_extensions = [
      \ 'coc-json',
      \ 'coc-css',
      \ 'coc-ultisnips',
      \ 'coc-tsserver',
      \ 'coc-emmet',
      \ 'coc-tag',
      \ 'coc-omni',
      \ 'coc-syntax',
      \ 'coc-yaml',
      \ 'coc-solargraph',
      \ 'coc-phpls'
      \ ]


 " Better display for messages
set cmdheight=1
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

 " don't give |ins-completion-menu| messages.
set shortmess+=c

 " always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

 function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

 " Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

 " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

 " Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

 " Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

 " Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

 function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

 " Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

 " Remap for rename current word
nmap <leader>crn <Plug>(coc-rename)

 " Remap for format selected region
xmap <leader>cfs  <Plug>(coc-format-selected)
nmap <leader>cfs  <Plug>(coc-format-selected)

 augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

 " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>cas  <Plug>(coc-codeaction-selected)
nmap <leader>cas  <Plug>(coc-codeaction-selected)

 " Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

 " Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

 " Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)

 " Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

 " Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

 " use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

 " Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

 " Using CocList
" Show all diagnostics
nnoremap <silent> <leader>cld  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <leader>cle  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <leader>clc  :<C-u>CocList commands<cr>
" Find symbol of current dcocument
nnoremap <silent> <leader>clo  :<C-u>CocList outline<cr>
" Search workleader symbolcs
nnoremap <silent> <leader>cls  :<C-u>CocList -I symbols<cr>
" Do default action for necxt item.
nnoremap <silent> <leader>cj  :<C-u>CocNext<CR>
" Do default action for prcevious item.
nnoremap <silent> <leader>ck  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <leader>cp  :<C-u>CocListResume<CR>


" Find what to highlight
map <Leader>syn :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>


