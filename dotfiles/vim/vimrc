set encoding=utf-8
" Will install plugin manager if not detected
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin("~/.vim/plugged")
  "Colorschemes
  Plug 'flazz/vim-colorschemes'
  Plug 'zeis/vim-kolor'
  Plug 'paramagicdev/vim-medic-chalk'

  "Tpope plugins
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-ragtag'
  Plug 'tpope/vim-vinegar'
  Plug 'tpope/vim-dispatch'

  "Javascript / React
  Plug 'yuezk/vim-js'
  Plug 'elzr/vim-json'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'jxnblk/vim-mdx-js'

  " Typescript
  Plug 'leafgarland/typescript-vim'
  Plug 'peitalin/vim-jsx-typescript'

  "ruby / rails
  Plug 'ngmy/vim-rubocop'
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-bundler'

  " Tests
  Plug 'janko/vim-test'

  "html / css
  Plug 'mattn/emmet-vim'
  Plug 'ap/vim-css-color'

  " Snippets
  Plug 'SirVer/ultisnips'

  "Misc
  Plug 'junegunn/rainbow_parentheses.vim'

  "Linting
  Plug 'dense-analysis/ale'

  "LSP
  Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
call plug#end()


" Path variables, prepend current directory
set path^=.,,

" Autosave
set autowrite

"indentations
set smartindent
set autoindent
set preserveindent
set copyindent

"tabs
set expandtab       "expand tabs into spaces
set tabstop=2 " when indenting with '>', use 4 spaces width
set shiftwidth=2 " On pressing tab, insert 4 spaces
set shiftround

"Make it obvious where 80 characters is
set colorcolumn=81

"Left hand column numbers
set number
set relativenumber

"Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

"show matching brackets
set showmatch

"show cursor position at all times
set ruler

"don't highlight the previous search term
set nohls

"incremental searching
set incsearch

" incremental commands
if exists('+inccommand')
  set inccommand=nosplit
endif

"turn on visual word wrapping
set wrap

"only break lines on 'breakat' characters
set linebreak

" Folds
set foldmethod=syntax

"Syntax highlighting
syntax on

"Enable filetypes, indentation and plugins
filetype plugin indent on

"Say no to file backups
set nobackup
set nowritebackup
set noswapfile

"fixes backspace in vim
set backspace=indent,eol,start

"fix backspace on some consoles
set bs=2

"Tabbing menu
set wildmenu
set wildmode=full
set wildignorecase

set wildignore+=*/node_modules/*
set wildignore+=*/coverage/*
set wildignore+=*/public/*
set wildignore+=*/.git/*,*/tmp/*,*/.tmp/*
set wildignore+=*/.bundle/*,*/vendor/*,*/log/*

"show command line
set showcmd

"keep small history
set history=50

"Keep buffers alive in background
set hidden

"Fixes files at the end of macros, better performance
set lazyredraw

"Stupid clipboard crap, configure this accordingly
set clipboard+=unnamedplus

"Provide a line of what column youre in
set cursorcolumn

"Adds a horizontal highlight to current line
set cursorline

" Global substitutions by default
set gdefault

"Fixing splits to be more natural
set splitbelow
set splitright

" Always use vertical diffs
set diffopt+=vertical

" 'matchit.vim' is built-in so let's enable it!
" " Hit '%' on 'if' to jump to 'else'.
runtime macros/matchit.vim

" Tags searching
set tags+=./.git/tags
set tags+=./tags

" For Kolor colorscheme
augroup MyColors
  autocmd!
  autocmd ColorScheme kolor call myhighlights#KolorHighlights()
  autocmd ColorScheme medic_chalk call myhighlights#MedicChalkHighlights()
augroup END

if exists(':RainbowParentheses') == 2
  autocmd FileType * RainbowParentheses
endif

" Strip whitespace
autocmd BufWritePre * %s/\s\+$//e

" Proper file completion
augroup FilenameCompletion
  autocmd!
  autocmd InsertEnter * execute 'cd %:h'
  autocmd InsertLeave * execute 'cd -'
augroup END

"Colorscheme / appearance
set background=dark
colorscheme medic_chalk
" set termguicolors

"Status line
set laststatus=2
set statusline=
set statusline+=\ %<%F\ %m\ %r\ %h\ %=%=%=%y\ [%c]%=


" Return cursor to original position
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal g'\"" | endif
endif

" Mappings

"<Leader> is now <space>
let mapleader = " "

" Jump down sensibly
nnoremap j gj
nnoremap k gk

set helpheight=20

" Using splits
map <Leader>sp :split<space>
nnoremap <Leader>vs :vsplit<space>

"Buffer switching

" Prev buffer
nnoremap <Leader><Leader> <C-^>
nnoremap [b :bprev<CR>
nnoremap ]b :bnext<CR>
nnoremap <C-b> :bdelete<CR>

"Tab switching
nnoremap <Leader>tn :tabnew<CR>
nnoremap <Leader>tj :tabnext<CR>
nnoremap <Leader>tk :tabprev<CR>
nnoremap <Leader>tc :tabclose<CR>

" better window movement
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" editing vim
map <Leader>rc :edit $HOME/.vim/vimrc<CR>
map <Leader>dv :edit $HOME/.vim<CR>
map <Leader>rv :source $MYVIMRC<CR>

" saving made eaiser
map <Leader>ww :w!<CR>
map <Leader>wq :wq!<CR>

" quit
map <Leader>qq :q!<CR>

" Quickfix Navigation
nnoremap ]q :cnext<CR>zz
nnoremap [q :cprevious<CR>zz
nnoremap [Q :cfirst<CR>zz
nnoremap ]Q :clast<CR>zz

" Vim based file navigation
nnoremap <Leader>f :find ./**/*
nnoremap <Leader>F :find<space>
nnoremap <Leader>e :edit ./
nnoremap <Leader>E :edit<space>

" Insert filename
iabbrev %f <C-R>=expand('%:t')<CR>

" Insert file basename
iabbrev %b <C-R>=expand('%:t:r')<CR>

" Insert directory
iabbrev %d <C-R>=expand('%')<CR>

" Insert full path
iabbrev %p <C-R>=expand('%')<CR>



" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

"File nav
if executable('ag')
  set grepprg=ag\ --vimgrep
  set grepformat=%f:%l:%c%m

  "populate quickfix with \
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<space>
endif

" bind <Leader>gw to grep word under cursor
nnoremap <Leader>gw :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

map <Leader>rn :call myfunctions#RenameFile()<cr>

" Create a new file
map <Leader>to :edit <C-R>=expand('%:p:h') . '/'<CR>

" ragtag recommended keybinding
inoremap <M-o> <Esc>o
inoremap <C-j> <Down>

"available globally
let g:ragtag_global_maps = 1

" Dont let it override <C-y>
let g:user_emmet_leader_key = '<C-e>'

" Ultisnips
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<c-j>"
let g:UltiSnipsListSnippets="<c-l>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Edit snippets
nnoremap <Leader>us :UltiSnipsEdit<CR>
nnoremap <Leader>ud :edit $HOME/.my-snippets

" Set my snippets
let g:UltiSnipsSnippetDirectories = [$HOME.'/.my-snippets']

" Remove backward jump interference
inoremap <c-x><c-k> <c-x><c-k>

" Rainbow parentheses
let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}'], ['<', '>']]


" Run ctags on current directory
nnoremap <Leader>gt :call myfunctions#GitCtags()<CR>

" Netrw
let g:netrw_dirhistmax = 10
let g:netrw_home = "$HOME/.netrwhist"
let g:netrw_hide = 0
let g:netrw_banner = 0
let g:netrw_liststyle=3
let g:netrw_winsize=30

" Open a 'file drawer' on the left
noremap <C-f> :Lexplore<CR>

" Open netrw in place of current buffer
noremap <C-n> :Explore<CR>

" Split vertical netrw from current buffer
noremap <C-s> :Vexplore<CR>

" ALE
let g:ale_fix_on_save = 1

"Errors
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_set_highlights = 0

" Linting
let g:ale_lint_on_text_changed = 1
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 1
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0

nmap <silent> [a <Plug>(ale_previous_wrap)
nmap <silent> ]a <Plug>(ale_next_wrap)

nnoremap <Leader>af :ALEFindReferences<CR>
nnoremap <Leader>as :ALESymbolSearch

" Remove scratch buffer at bottom
" set completeopt-=preview
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" Remove scanning of files / included files for keyword
set complete-=i

let g:LanguageClient_autoStart = 1

:call myfunctions#InstallLanguageClientServers()

let g:LanguageClient_serverCommands = {
      \ 'sh': ['bash-language-server', 'start'],
      \ 'yaml': ['yaml-language-server', '--stdio'],
      \ 'vim': ['vim-language-server', '--stdio'],
      \ 'dockerfile': ['docker-langserver', 'stdio'],
      \ 'javascript': ['typescript-language-server', '--stdio'],
      \ 'typescript': ['typescript-language-server', '--stdio'],
      \ 'ruby': ['solargraph', 'stdio'],
      \ }

function! LC_maps()
  if has_key(g:LanguageClient_serverCommands, &filetype)
    nnoremap <buffer> <Leader>gm :call LanguageClient_contextMenu()<CR>
    nnoremap <buffer> <Leader>gh :call LanguageClient#textDocument_hover()<CR>
    nnoremap <buffer> <Leader>gd :call LanguageClient#textDocument_definition()<CR>
    nnoremap <buffer> <Leader>gy :call LanguageClient#textDocument_typeDefinition()<CR>
    nnoremap <buffer> <Leader>gi :call LanguageClient#textDocument_implementation()<CR>
    nnoremap <buffer> <Leader>grn :call LanguageClient#textDocument_rename()<CR>
    nnoremap <buffer> <Leader>gs :call LanguageClient#textDocument_documentSymbol()<CR>
    nnoremap <buffer> <Leader>grf :call LanguageClient#textDocument_references()<CR>
    nnoremap <buffer> <Leader>gfm :call LanguageClient#textDocument_formatting()<CR>

    set completefunc=LanguageClient#complete
    set omnifunc=LanguageClient#complete
    set formatexpr=LanguageClient#textDocument_rangeFormatting_sync()
  endif
endfunction

autocmd FileType * call LC_maps()


nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

let g:test#strategy = "dispatch"
