set encoding=utf-8
" Will install plugin manager if not detected
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin("~/.vim/plugged")
  "Colorschemes
  Plug 'flazz/vim-colorschemes'
  Plug 'zeis/vim-kolor'
  Plug 'paramagicdev/vim-medic-chalk'

  "Tpope plugins
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-ragtag'
  Plug 'tpope/vim-dispatch'

  "Javascript / React
  Plug 'yuezk/vim-js'
  Plug 'elzr/vim-json'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'jxnblk/vim-mdx-js'

  " Typescript
  Plug 'leafgarland/typescript-vim'
  Plug 'peitalin/vim-jsx-typescript'

  "ruby / rails
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-bundler'

  " Tests
  Plug 'janko/vim-test'

  "html / css
  Plug 'mattn/emmet-vim'
  Plug 'ap/vim-css-color'

  " Snippets
  Plug 'SirVer/ultisnips'

  "Misc
  Plug 'junegunn/rainbow_parentheses.vim'

  "Linting
  Plug 'dense-analysis/ale'

  " fuzzy finding
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

  " File explorer
  Plug 'preservim/nerdtree'

  "completion
  Plug 'neoclide/coc.nvim', {'branch': 'release'}

  let g:coc_global_extensions = [
        \ 'coc-tsserver',
        \ 'coc-spell-checker',
        \ 'coc-tailwindcss',
        \ 'coc-vimlsp',
        \ 'coc-solargraph',
        \ 'coc-yaml',
        \ 'coc-json',
        \ 'coc-snippets',
        \ 'coc-css',
        \ 'coc-emmet',
        \ 'coc-git',
        \ 'coc-html'
        \ ]
call plug#end()


" Path variables, prepend current directory
set path^=.,,

" Autosave
set autowrite

"indentations
set smartindent
set autoindent
set preserveindent
set copyindent

"tabs
set expandtab       "expand tabs into spaces
set tabstop=2 " when indenting with '>', use 4 spaces width
set shiftwidth=2 " On pressing tab, insert 4 spaces
set shiftround

"Make it obvious where 80 characters is
set colorcolumn=81

"Left hand column numbers
set number
set relativenumber

"Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

"show matching brackets
set showmatch

"show cursor position at all times
set ruler

"don't highlight the previous search term
set nohls

"incremental searching
set incsearch

" incremental commands
if exists('+inccommand')
  set inccommand=nosplit
endif

"turn on visual word wrapping
set wrap

"only break lines on 'breakat' characters
set linebreak

" Folds
set foldmethod=syntax

"Syntax highlighting
syntax on

"Enable filetypes, indentation and plugins
filetype plugin indent on

"Say no to file backups
set nobackup
set nowritebackup
set noswapfile

"fixes backspace in vim
set backspace=indent,eol,start

"fix backspace on some consoles
set bs=2

"Tabbing menu
set wildmenu
set wildmode=full
set wildignorecase

set wildignore+=*/node_modules/*
set wildignore+=*/coverage/*
set wildignore+=*/public/*
set wildignore+=*/.git/*,*/tmp/*,*/.tmp/*
set wildignore+=*/.bundle/*,*/vendor/*,*/log/*

"show command line
set showcmd

"keep small history
set history=50

"Keep buffers alive in background
set hidden

"Fixes files at the end of macros, better performance
set lazyredraw

"Stupid clipboard crap, configure this accordingly
set clipboard+=unnamedplus

"Provide a line of what column youre in
set cursorcolumn

"Adds a horizontal highlight to current line
set cursorline

" Global substitutions by default
set gdefault

"Fixing splits to be more natural
set splitbelow
set splitright

" Always use vertical diffs
set diffopt+=vertical

" 'matchit.vim' is built-in so let's enable it!
" " Hit '%' on 'if' to jump to 'else'.
runtime macros/matchit.vim

" Tags searching
set tags+=./.git/tags
set tags+=./tags

" For Kolor colorscheme
augroup MyColors
  autocmd!
  autocmd ColorScheme kolor call myhighlights#KolorHighlights()
  autocmd ColorScheme medic_chalk call myhighlights#MedicChalkHighlights()
augroup END

if exists(':RainbowParentheses') == 2
  :RainbowParentheses
endif

" Strip whitespace
autocmd BufWritePre * %s/\s\+$//e

" Proper file completion
augroup FilenameCompletion
  autocmd!
  autocmd InsertEnter * execute 'cd %:h'
  autocmd InsertLeave * execute 'cd -'
augroup END

"Colorscheme / appearance
set background=dark
colorscheme medic_chalk
" set termguicolors

"Status line
set laststatus=2
set statusline=
set statusline+=\ %<%F\ %m\ %r\ %h\ %=%=%=%y\ [%c]%=

" Return cursor to original position
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal g'\"" | endif
endif

" Mappings

"<Leader> is now <space>
let mapleader = " "

" Jump down sensibly
nnoremap j gj
nnoremap k gk

set helpheight=20

" Using splits
map <Leader>sp :split<space>
nnoremap <Leader>vs :vsplit<space>

"Buffer switching

" Prev buffer
nnoremap <Leader><Leader> <C-^>
nnoremap [b :bprev<CR>
nnoremap ]b :bnext<CR>
nnoremap <C-b> :bdelete<CR>

"Tab switching
nnoremap <Leader>tn :tabnew<CR>
nnoremap <Leader>tj :tabnext<CR>
nnoremap <Leader>tk :tabprev<CR>
nnoremap <Leader>tc :tabclose<CR>

" better window movement
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" editing vim
map <Leader>rc :edit $HOME/.vim/vimrc<CR>
map <Leader>dv :edit $HOME/.vim<CR>
map <Leader>rv :source $MYVIMRC<CR>

" saving made eaiser
map <Leader>ww :w!<CR>
map <Leader>wq :wq!<CR>

" quit
map <Leader>qq :q!<CR>

" Quickfix Navigation
nnoremap ]q :cnext<CR>zz
nnoremap [q :cprevious<CR>zz
nnoremap [Q :cfirst<CR>zz
nnoremap ]Q :clast<CR>zz

" FZF options
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let g:fzf_layout = {
    \ 'down': '~40%'
    \ }

let g:fzf_colors = {
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'String', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'Search', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" If ag is installed, use ag
if executable('ag')
  command! -bang -complete=file GitFiles call fzf#run(fzf#wrap({'source': 'ag --hidden -g ""', 'sink': 'e'}, <bang>0))
  command! -bang -complete=file Files call fzf#run(fzf#wrap({'source': 'ag -u -g ""', 'sink': 'e'}, <bang>0))
else
  command! -bang -complete=file GitFiles call fzf#run(fzf#wrap({'source': 'git ls-files', 'sink': 'e'}, <bang>0))
  command! -bang -complete=file Files call fzf#run(fzf#wrap({'source': 'find .', 'sink': 'e'}, <bang>0))
endif



if has('nvim') && !exists('g:fzf_layout')
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
endif

  "Do not respect .gitignore
nnoremap <Leader>F :Files<CR>

"Respect .gitignore
nnoremap <Leader>f :GitFiles<CR>

" Vim based file navigation
nnoremap <Leader>vf :find ./**/*
nnoremap <Leader>vF :find
nnoremap <Leader>e :edit ./
nnoremap <Leader>E :edit<space>

" Insert filename
inoreabbrev %f <C-R>=expand('%:t')<CR>

" Insert file basename
iabbrev %b <C-R>=expand('%:t:r')<CR>

" Insert directory
iabbrev %d <C-R>=expand('%')<CR>

" Insert full path
iabbrev %p <C-R>=expand('%')<CR>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

"File nav
if executable('ag')
  set grepprg=ag\ --vimgrep
  set grepformat=%f:%l:%c%m

  "populate quickfix with \
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<space>
endif

" bind <Leader>gw to grep word under cursor
nnoremap <Leader>gw :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

map <Leader>rn :call myfunctions#RenameFile()<cr>

" Create a new file
map <Leader>to :edit <C-R>=expand('%:p:h') . '/'<CR>
map <Leader>td :!mkdir -p <C-R>=expand('%:p:h') . '/'<CR>

" ragtag recommended keybinding
inoremap <M-o> <Esc>o
inoremap <C-j> <Down>

"available globally
let g:ragtag_global_maps = 1

" Dont let it override <C-y>
let g:user_emmet_leader_key = '<C-e>'

" Ultisnips
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<c-j>"
let g:UltiSnipsListSnippets="<c-l>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Edit snippets
nnoremap <Leader>us :UltiSnipsEdit<CR>
nnoremap <Leader>ue :edit $HOME/.my-snippets<CR>

" Set my snippets
let g:UltiSnipsSnippetDirectories = [$HOME.'/.my-snippets']

" Remove backward jump interference
inoremap <c-x><c-k> <c-x><c-k>

" Rainbow parentheses
let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}'], ['<', '>']]


" Run ctags on current directory
nnoremap <Leader>gt :call myfunctions#GitCtags()<CR>

" ALE
let g:ale_fix_on_save = 1

"Errors
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_set_highlights = 0

" Linting
let g:ale_lint_on_text_changed = 1
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 1
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0

nmap <silent> [a <Plug>(ale_previous_wrap)
nmap <silent> ]a <Plug>(ale_next_wrap)

nnoremap <Leader>af :ALEFindReferences<CR>
nnoremap <Leader>as :ALESymbolSearch

" Testing
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

let g:test#strategy = "dispatch"

" Completion

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [d <Plug>(coc-diagnostic-prev)
nmap <silent> ]d <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> <Leader>gd <Plug>(coc-definition)
nmap <silent> <Leader>gy <Plug>(coc-type-definition)
nmap <silent> <Leader>gi <Plug>(coc-implementation)
nmap <silent> <Leader>gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>crn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>cf  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>ca  <Plug>(coc-codeaction-selected)
nmap <leader>ca  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>af  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <Leader>ld  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <Leader>le  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <Leader>lc  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <Leader>lo  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <Leader>ls  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <Leader>ln  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <Leader>lp  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <Leader>lr  :<C-u>CocListResume<CR>


" Nerdtree
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeShowHidden = 1
let g:NERDTreeHijackNetrw = 1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeQuitOnOpen = 1

autocmd BufNew,BufEnter *.css execute "silent! CocDisable"
autocmd BufLeave *.css execute "silent! CocEnable"
