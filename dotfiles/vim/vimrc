set encoding=utf-8
" Plugins{{{
" Will install plugin manager if not detected
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin("~/.vim/plugged")
  "Colorschemes{{{
  Plug 'arzg/vim-colors-xcode'
  "}}}
  "Tpope plugins{{{
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-ragtag'
  Plug 'tpope/vim-dispatch'
  "}}}
  "Javascript / React{{{
  Plug 'yuezk/vim-js'
  Plug 'elzr/vim-json'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'jxnblk/vim-mdx-js'
  "}}}
  " Typescript{{{
  Plug 'leafgarland/typescript-vim'
  Plug 'peitalin/vim-jsx-typescript'
  "}}}
  "ruby / rails{{{
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-bundler'
  Plug 'onemanstartup/vim-slim'
  "}}}
  " Elixir{{{
  Plug 'elixir-editors/vim-elixir'
  "}}}
  " Tests{{{
  Plug 'janko/vim-test'
  "}}}
  "html / css{{{
  Plug 'mattn/emmet-vim'
  Plug 'ap/vim-css-color'
  "}}}
  "Misc{{{
  Plug 'junegunn/rainbow_parentheses.vim'
  "}}}
  "fuzzy finding{{{
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'
  "}}}
  "Vim-Go{{{
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  "}}}
  "Snippets{{{
  " Plug 'honza/vim-snippets'
  Plug 'dcampos/nvim-snippy'
  "}}}
  "LSP{{{
  if has("nvim-0.5")
    " builtinCompletion
    Plug 'neovim/nvim-lspconfig'
    " :LspInstall bashls cssls emmet_ls gopls html jsonls tsserver solargraph vimls yamlls
    Plug 'williamboman/nvim-lsp-installer'
    Plug 'hrsh7th/nvim-cmp'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-cmdline'
    Plug 'dcampos/cmp-snippy'

    " Neovim Tree shitter{{{
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    Plug 'nvim-treesitter/playground'
  endif "}}}
  "}}}
call plug#end()
"}}}
" Defaults {{{
" Path variables, prepend current directory
set path^=.,,

" Autosave
set autowrite

"indentations
set smartindent
set autoindent
set preserveindent
set copyindent

"tabs
set expandtab       "expand tabs into spaces
set tabstop=2 " when indenting with '>', use 4 spaces width
set shiftwidth=2 " On pressing tab, insert 4 spaces
set shiftround

"Make it obvious where 80 characters is
set colorcolumn=81

"Left hand column numbers
set number

"Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

"show matching brackets
set showmatch

"show cursor position at all times
set ruler

"don't highlight the previous search term
set nohls

"incremental searching
set incsearch

" incremental commands
if exists('+inccommand')
  set inccommand=nosplit
endif

"turn on visual word wrapping
set wrap

"only break lines on 'breakat' characters
set linebreak

" Folds
set foldmethod=syntax

"Syntax highlighting
syntax on

"Enable filetypes, indentation and plugins
filetype plugin indent on

"Say no to file backups
set nobackup
set nowritebackup
set noswapfile
set undodir=~/.vim/undodir
set undofile

"fixes backspace in vim
set backspace=indent,eol,start

"fix backspace on some consoles
set bs=2

"Tabbing menu
set wildmenu
set wildmode=full
set wildignorecase

set wildignore+=*/node_modules/*
set wildignore+=*/coverage/*
set wildignore+=*/public/*
set wildignore+=*/.git/*,*/tmp/*,*/.tmp/*
set wildignore+=*/.bundle/*,*/vendor/*,*/log/*

"show command line
set showcmd

"keep small history
set history=50

"Keep buffers alive in background
set hidden

"Fixes files at the end of macros, better performance
set lazyredraw

"Stupid clipboard crap, configure this accordingly
set clipboard+=unnamedplus

"Provide a line of what column youre in
set cursorcolumn

"Adds a horizontal highlight to current line
set cursorline

" Global substitutions by default
set gdefault

"Fixing splits to be more natural
set splitbelow
set splitright

" Always use vertical diffs
set diffopt+=vertical

" 'matchit.vim' is built-in so let's enable it!
" " Hit '%' on 'if' to jump to 'else'.
runtime macros/matchit.vim

" Tags searching
set tags+=./.git/tags
set tags+=./tags
"}}}
" Autocmds {{{
" For Kolor colorscheme
augroup MyColors
  autocmd!
  autocmd ColorScheme kolor call myhighlights#KolorHighlights()
  autocmd ColorScheme medic_chalk call myhighlights#MedicChalkHighlights()
augroup END

" Strip whitespace
autocmd BufWritePre * %s/\s\+$//e

" Return cursor to original position
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal g'\"" | endif
endif
"}}}
"Colorscheme / appearance{{{
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

set background=dark
colorscheme xcodedarkhc

"Status line
set laststatus=2
set statusline=
set statusline+=\ %<%F\ %m\ %r\ %h\ %=%=%=%y\ [%c]%=
"}}}
" Sensible stuff{{{

"<Leader> is now <space>
let mapleader = " "

" Jump down sensibly
nnoremap j gj
nnoremap k gk

set helpheight=20
"}}}
" Movement{{{
" Using splits
map <Leader>sp :split<space>
nnoremap <Leader>vs :vsplit<space>

"Buffer switching

" Prev buffer
nnoremap <Leader><Leader> <C-^>
nnoremap [b :bprev<CR>
nnoremap ]b :bnext<CR>
nnoremap <C-b> :bdelete<CR>

"Tab switching
nnoremap <Leader>tn :tabnew<CR>
nnoremap <Leader>tj :tabnext<CR>
nnoremap <Leader>tk :tabprev<CR>
nnoremap <Leader>tc :tabclose<CR>

" better window movement
nnoremap <C-h> <C-w>h
" nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" editing vim
map <Leader>rc :edit $HOME/.vim/vimrc<CR>
map <Leader>dv :edit $HOME/.vim<CR>
map <Leader>rv :source $MYVIMRC<CR>

" saving made eaiser
map <Leader>ww :w!<CR>
map <Leader>wq :wq!<CR>

" quit
map <Leader>qq :q!<CR>

" Quickfix Navigation
nnoremap ]q :cnext<CR>zz
nnoremap [q :cprevious<CR>zz
nnoremap [Q :cfirst<CR>zz
nnoremap ]Q :clast<CR>zz
"}}}
" Telescope {{{
" Find files using Telescope command-line sugar.
nnoremap <leader>F <cmd>Telescope find_files<cr>
nnoremap <leader>ff <cmd>Telescope git_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
"}}}
" Custom commands {{{
nnoremap <Leader>ra :!bundle exec rubocop -A <C-R>=expand("%")<CR><CR>
nnoremap <Leader>rb :!bundle exec standardrb --fix <C-R>=expand("%")<CR><CR>
nnoremap <Leader>ts :!yarn ts-standard <C-R>=expand("%")<CR> --fix<CR>
nnoremap <Leader>js :!standard <C-R>=expand("%")<CR> --fix<CR>
nnoremap <Leader>yp :!yarn prettier <C-R>=expand("%")<CR> --write<CR>

nnoremap <Leader>kp :!kubs pull && kubs git_push
nnoremap <Leader>kc :!kubs git_pull && kubs copy<cr>

" Vim based file navigation
nnoremap <Leader>vf :find ./**/*
nnoremap <Leader>vF :find
nnoremap <Leader>e :edit ./
nnoremap <Leader>E :edit<space>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

"File nav
if executable('ag')
  set grepprg=ag\ --vimgrep
  set grepformat=%f:%l:%c%m

  "populate quickfix with \
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<space>
endif

" bind <Leader>gw to grep word under cursor
nnoremap <Leader>gw :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

map <Leader>rf :call myfunctions#RenameFile()<cr>

" Create a new file
map <Leader>to :edit <C-R>=expand('%:p:h') . '/'<CR>
map <Leader>td :!mkdir -p <C-R>=expand('%:p:h') . '/'<CR>
"}}}
" Ragtag{{{
" ragtag recommended keybinding
inoremap <M-o> <Esc>o
inoremap <C-j> <Down>

"available globally
let g:ragtag_global_maps = 1
"}}}
" Emmet{{{
" Dont let it override <C-y>
let g:user_emmet_leader_key = '<C-e>'
"}}}

" Remove backward jump interference
inoremap <c-x><c-k> <c-x><c-k>
"}}}
" Misc {{{

" Rainbow parentheses
let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
let g:rainbow#blacklist = ["#000000"]

nnoremap <Leader>rp :RainbowParentheses!!<CR>

augroup RainbowParens
  autocmd!
  autocmd Syntax * RainbowParentheses
  autocmd VimEnter * RainbowParentheses
augroup END

" Run ctags on current directory
nnoremap <Leader>gt :call myfunctions#GitCtags()<CR>
"}}}
" Testing{{{

nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

let g:test#strategy = "dispatch"

"}}}
"Sign Columns{{{

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif
"}}}
" Netrw{{{
map <C-n> :Explore<CR>
let g:netrw_browse_split = 0
let g:netrw_banner = 0
let g:netrw_mkdir_cmd = 'mkdir -p'
let g:netrw_winsize = 25
let g:netrw_localrmdir='rm -rf'
let g:netrw_liststyle=0
"}}}
"Vim-Go{{{
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
"}}}
"{{{ NVIM lsp
let g:lsp_diagnostics_enabled = 1
"}}}
" Completion{{{
set cmdheight=2
set updatetime=300
set shortmess+=c
set completeopt=menu,menuone,noselect

" <c-space> becomes completion
inoremap <C-space> <C-x><C-o>
set omnifunc=syntaxcomplete#Complete

" Shelf this for later
if has("nvim-0.5")
  source $HOME/.vim/completion.vim
endif
"}}}
