snippet req "require statement" w
const $1 = require("$2")
endsnippet

snippet im "import default" b
import $1 from "$2";$0
endsnippet

snippet imb "import named exports" b
import { $1 } from "$2";$0
endsnippet

snippet exd "export default" i
export default () => (
  ${1:${VISUAL}}
)$0
endsnippet

snippet html "HTML tag" i
<$1 $2>${3:${VISUAL}}</$1>$0
endsnippet

snippet class "class" b
class $1 {
  ${2:constructor() {
    $3
  }

  }${4:${VISUAL}}
}$0
endsnippet

snippet rclass "React class" b
class $1 extends React.Component {
  ${2:${VISUAL}}
}$0
endsnippet

snippet rndr
render() {
  ${1:${VISUAL}}
}$0
endsnippet

snippet fn "function" i
function $1($2) {
  ${3:${VISUAL}}
}$0
endsnippet

snippet =- "Arrow function" w
${1:const} = ${2:($3)} => ${4:${VISUAL}}$0
endsnippet

snippet ==- "Multiline arrow function" w
${1:const} $2 = ${3:($4)} => {
  ${5:${VISUAL}}
}$0
endsnippet

snippet qs "query selector" w
document.querySelector(${1:${VISUAL}});$0
endsnippet

snippet qsa "query selector all" w
document.querySelectorAll(${1:${VISUAL}});$0
endsnippet

# Testing snippets
snippet test "test block" w
test('${1:#Should do X}', () => {
  ${2:${VISUAL}}
});$0
endsnippet

snippet desc "Describe block" w
describe('${1:#Do y}', () => {
${2:${VISUAL}}
});$0
endsnippet

snippet expect "Expect X" w
expect($1).${2:toBe}(${3:true});$0
endsnippet

# Documentation snippets
snippet jsdoc "JSDoc snippet" b
/**
* ${1:${VISUAL}}
*/$0
endsnippet

snippet jsdoci "Inline jsdoc" b
/** ${1:${VISUAL}} */$0
endsnippet

snippet @param "Parameters" w
@param {${1:type}} ${2:parameter} - ${3:description}
endsnippet

snippet @return "Return value" w
@return {${1:type}} - ${2:description}
endsnippet

# Console snippets

snippet cl "console.log" w
console.log(${1:${VISUAL}})$0
endsnippet

snippet ct "console.table" w
console.table(${1:${VISUAL}});$0
endsnippet

snippet ctr "console.trace" w
console.trace(${1:${VISUAL}});$0
endsnippet

# Libraries

snippet jsx "jsx pragma" b
/** @jsx jsx */$0
endsnippet

snippet react "import react" b
import * as React from "react";$0
endsnippet

snippet emotion "import emotion" b
import { css${1:, jsx} } from "@emotion/core"$0
endsnippet

snippet theme-ui "import theme-ui" b
import { jsx } from 'theme-ui'$0
endsnippet

snippet proptypes "import PropTypes from 'prop-types'" b
import ${1:PropTypes} from "prop-types"$0
endsnippet

snippet rtl "import react-testing-library" b
import { $1 } from "@testing-library/react"
endsnippet

snippet jq "jquery's $('') function" w
$(${1:'$2'})$0
endsnippet

snippet for "for loop" b
for(${1:i = 0; i < $2; i++}) {
	${3:${VISUAL}}
}
$0
endsnippet

snippet refcy "Cypress reference" b
/// <reference types="Cypress" />
$0
endsnippet

snippet it "it('test', () => {})" b
it("$1", () => {
  ${2:${VISUAL}}
})$0
endsnippet

snippet envjsdom "Test environment JSDOM" w
/**
 * @jest-environment jsdom
 */
endsnippet

snippet envnode "Test environment Node" w
/**
 * @jest-environment node
 */
endsnippet

snippet tldom "testing library dom" w
import {
  getByLabelText,
  getByText,
  getByTestId,
  queryByTestId,
  waitFor,
} from '@testing-library/dom'
import '@testing-library/jest-dom/extend-expect'
endsnippet

snippet jsdom "JSDOM" b
const jsdom = require("jsdom");
const { JSDOM } = jsdom;
endsnippet

snippet stimc "stimulus controller" b

import { Controller } from "stimulus"

export default class $1 extends Controller {
  $2
  ${3:initialize() {
    $4
  }}
  ${5:connect() {
    $6
  }}
  ${7:disconnect() {
    $8
  }}
}

endsnippet

snippet uvu "b"
import { suite } from "uvu";
import * as assert from "uvu/assert";

const $1 = suite("$1")
$0
endsnippet
