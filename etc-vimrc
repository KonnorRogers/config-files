set encoding=utf-8
set nocompatible

" Path variables
set path+=.,,**

" Autosave
set autowrite

"indentations
set smartindent
set autoindent
set preserveindent
set copyindent

"tabs
set expandtab       "expand tabs into spaces
set tabstop=2 " when indenting with '>', use 4 spaces width
set shiftwidth=2 " On pressing tab, insert 4 spaces
set shiftround

"Make it obvious where 80 characters is
set colorcolumn=81

"Left hand column numbers
set number
set relativenumber

"Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

"show matching brackets
set showmatch

"show cursor position at all times
set ruler

"don't highlight the previous search term
set nohls

"incremental searching
set incsearch

"turn on visual word wrapping
set wrap

"only break lines on 'breakat' characters
set linebreak

" Folds
set foldmethod=indent
set nofoldenable

"Syntax highlighting
syntax on

"Enable filetypes, indentation and plugins
filetype plugin indent on

"Say no to file backups
set nobackup
set nowritebackup
set noswapfile

"fixes backspace in vim
set backspace=indent,eol,start

"fix backspace on some consoles
set bs=2

"Tabbing menu
set wildmenu
set wildignore+=node_modules

"show command line
set showcmd

"keep small history
set history=50

"Keep buffers alive in background
set hidden

"Fixes files at the end of macros, better performance
set lazyredraw

"Stupid clipboard crap, configure this accordingly
set clipboard+=unnamedplus

"Provide a line of what column youre in
set cursorcolumn

"Adds a horizontal highlight to current line
set cursorline

" Global substitutions by default
set gdefault

"Fixing splits to be more natural
set splitbelow
set splitright

" Always use vertical diffs
set diffopt+=vertical

" 'matchit.vim' is built-in so let's enable it!
" " Hit '%' on 'if' to jump to 'else'.
runtime macros/matchit.vim

" Tags searching
set tags+=./.git/tags
set tags+=./tags

"Colorscheme / appearance
set background=dark

"Status line
set laststatus=2
set statusline=
set statusline+=\ %<%F\ %m\ %r\ %h\ %=%=%=%y\ [%c]%=

highlight StatusLine guibg=#87875f guifg=#262626
highlight link NetrwDir Constant

" Autocommands

" Return cursor to original position
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal g'\"" | endif
endif

augroup filetypedetect
  au! BufRead,BufNewFile *nc setfiletype nc "http://www.vim.org/scripts/script.php?script_id=1847
  "html.ep now handled by https://github.com/yko/mojo.vim
  autocmd BufNewFile,BufReadPost *.ino,*.pde setfiletype cpp

  " Set markdown files to markdown filetype
  autocmd BufNewFile,BufRead *.md,*markdown set filetype=markdown
augroup END


"strip trailing whitespace from all files
autocmd BufWritePre * :%s/\s\+$//e

"removes auto-commenting when hitting <CR>
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Mappings

"<Leader> is now <space>
let mapleader = " "

" Jump down sensibly
nnoremap j gj
nnoremap k gk

" Using splits
map <Leader>s :split<CR>

"Buffer switching
nnoremap <Leader><Leader> <C-^>
nnoremap <Leader>bp :bprev<CR>
nnoremap <Leader>bn :bnext<CR>

"Tab switching
nnoremap <Leader>tn :tabnew<CR>
nnoremap <Leader>tj :tabnext<CR>
nnoremap <Leader>tp :tabprev<CR>
nnoremap <Leader>tc :tabclose<CR>

" better window movement
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" editing vim
map <Leader>ev :split $HOME/.vimrc<CR>
map <Leader>rv :source $MYVIMRC<CR>

" saving made eaiser
map <Leader>ww :w!<CR>
map <Leader>wq :wq!<CR>

" quit
map <Leader>qq :q!<CR>

" Quickfix Navigation
nnoremap ]q :cnext<CR>zz
nnoremap [q :cprevious<CR>zz
nnoremap [Q :cfirst<CR>zz
nnoremap ]Q :clast<CR>zz

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Custom functions

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

map <Leader>rn :call RenameFile()<cr>

function! Touch()
  let current_dir = expand('%:h')
  let file_name = input('New file name: ', current_dir . '/')

  exec ':e ' . file_name
endfunction

map <Leader>nf :call Touch()<CR>


" bind <Leader>gw to grep word under cursor
nnoremap <Leader>gw :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Completion
setlocal omnifunc=syntaxcomplete#Complete
setlocal completefunc=syntaxcomplete#Complete

